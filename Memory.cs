
public class Memory
{
    private byte[] memory = new byte[4096]; // 4КБ памяти

    private byte[] Fonts =
    {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    // Индексатор: позволяет обращаться к памяти как к массиву, например memory[0x200]
    public byte this[int index]
    {
        get => memory[index];          // Получить байт по адресу
        set => memory[index] = value; // Установить байт по адресу
    }

    public void LoadProgram(byte[] program)
    {
        // Копирование шрифтов в память, начиная с адреса 0x0 (0)
        Array.Copy(Fonts, 0, memory, 0x0, Fonts.Length);
        // Копирование программы в память, начиная с адреса 0x200 (512)
        Array.Copy(program, 0, memory, 0x200, program.Length);
    }
}
